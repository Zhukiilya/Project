from cryptography.hazmat.primitives.asymmetric import rsa, padding #0
from cryptography.hazmat.primitives import serialization, hashes
from getpass import getpass
from cryptography.hazmat.backends import default_backend
import ctypes
import gc

def securedelb(data):
    buffer = (ctypes.c_char * len(data)).from_buffer_copy(data)
    ctypes.memset(ctypes.addressof(buffer), 0, len(data))
#определяем ОС
import platform
OS = platform.system()
#getpass скрывает ввод пароля в консоли
def create_private_rsa_key(OS):
    
    password = getpass("Введите пароль для файла, минимум 2: ").encode("utf-8")
    #особенность реализации для стойкости от атак по времени
    private_rsa_key_a = rsa.generate_private_key(public_exponent=65537, key_size=4096, backend=default_backend())
    private_key_a_pem = private_rsa_key_a.private_bytes(
                      encoding=serialization.Encoding.PEM,
                      format=serialization.PrivateFormat.PKCS8,
                      encryption_algorithm=serialization.BestAvailableEncryption(password))
    del password
    
    with open("private_key.pem", "wb") as f:
       f.write(private_key_pem)

S_a = private_rsa_key_a.sign(n_ae_bytes, padding=padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=32), algorithm=hashes.SHA256())
