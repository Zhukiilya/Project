from cryptography.hazmat.primitives.asymmetric import rsa, padding #0
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.backends import default_backend
# 0 публичные и приватные ключи RSA для цифровой подписи, их обмен
private_rsa_key_a = rsa.generate_private_key(
    public_exponent=65537,
    key_size=4096,  # Длина модуля n = 4096 бит
    backend=default_backend()
)
public_rsa_key_a = private_key.public_key()
n_ae = public_rsa_key_a.public_numbers().n

n_ae_bytes = n_ae.to_bytes((n.bit_length() + 7) // 8, byteorder="big")
S_a = private_rsa_key_a.sign(n_ae_bytes, padding=padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=32), algorithm=hashes.SHA256())
